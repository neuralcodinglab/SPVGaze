// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CalculateActivations
#pragma kernel SpreadActivations
#pragma kernel ClearActivations
#pragma kernel DebugBuffer


struct Phosphene
{
  float2 position;
  float size;
  float2 activation; // activation pro phosphene is eye dependent as stimulation is different (texture offset)
  float2 trace; // same reason as activation
};

uint2 ScreenResolution; // resolution of output texture

int gazeAssisted;
int gazeLocked;
float2 _EyePositionLeft;
float2 _EyePositionRight;
float2 _LeftEyeCenter;
float2 _RightEyeCenter;

float input_effect;     // The factor by which stimulation accumulates to phosphene activation
float intensity_decay;  // The factor by which previous activation still influences current activation
float trace_increase;   // The habituation strength: the factor by which stimulation leads to buildup of memory trace
float trace_decay;      // The factor by which the stimulation memory trace decreases

RWStructuredBuffer<Phosphene> phosphenes;

Texture2DArray<float4> InputTexture; // ToDo: Should probably be renamed to InputTex or StimulationTex
RWTexture2DArray<unorm float2> ActivationTexture; // ToDo: Rename to ActivationTex
RWTexture2DArray<float4> SimulationRenderTexture; // ToDo: SimulationTex? RenderTex?

RWStructuredBuffer<float4> debugBuffer;

[numthreads(32,1,2)]
void CalculateActivations (uint3 id : SV_DispatchThreadID)
{
  uint phosIdx = id.x;
  uint eyeIdx = id.z;

  //***************************************************************************
  // Get Position and Stimulation
  //***************************************************************************  
  // get correct eye position (0 is left, 1 is right)
  float2 eyePos = lerp(_EyePositionLeft, _EyePositionRight, eyeIdx);
  float2 eyeCenter = lerp(_LeftEyeCenter, _RightEyeCenter, eyeIdx);

  // if gaze assist is set to 1 (on), adjust sample position to eye position
  // calculate corrected phosphene position
  float2 samplePosition = phosphenes[phosIdx].position - 0.5
      + (gazeAssisted * eyePos)           // With gaze assisted sampling, center around current eye position
      + ((1 - gazeAssisted) * eyeCenter); // Without center around eye center calculated at the start of the programme

  // Read stimulation value from input texture
  uint2 index = uint2((uint)(samplePosition.x * ScreenResolution.x), (uint)(samplePosition.y * ScreenResolution.y));
  float stim = InputTexture[uint3(index, eyeIdx)].x;

  //***************************************************************************
  // Update activation and trace
  //***************************************************************************
  // Compute phosphene activation as function of previous activation and stimulation
  float actv = phosphenes[phosIdx].activation[eyeIdx];
  phosphenes[phosIdx].activation[eyeIdx] = max(0, intensity_decay*actv + input_effect * (stim - phosphenes[phosIdx].trace[eyeIdx]));
  phosphenes[phosIdx].trace[eyeIdx] = trace_decay*phosphenes[phosIdx].trace[eyeIdx] + trace_increase * stim;

  //***************************************************************************
  // Write to activation texture
  //***************************************************************************
  // calculate output position, either around center (in gaze ignored) or around foveal position
  float2 outputPosition = phosphenes[phosIdx].position - 0.5
      + (gazeLocked * eyePos)           // With gaze locked, center around current eye position
      + ((1 - gazeLocked) * eyeCenter); // Without, center around eye center calculated at the start of the programme
  
  // calculate position on activation texture (can be different if input texture is a different size)
  uint2 idx = uint2((uint)(outputPosition.x * ScreenResolution.x), (uint)(outputPosition.y * ScreenResolution.y));
  ActivationTexture[uint3(idx, eyeIdx)] =  float2(actv, phosphenes[phosIdx].size);
}

/**
 * \brief samples from a normal distribution given the distance |mean - pos| and deviation (phosphene size)
 * \param d distance from center
 * \param sigma standard deviation
 * \return sample from normal distribution
 */
float Gaussian(float d, float sigma)
{
  // float c = 1.0 / (sigma * 2.50662); // 2.50662 is approximation of sqrt(2*pi)
  float c = 1.0; // JR: Scales the gaussian to max 1.0
  return c * exp( -(d * d) / (2 * sigma * sigma) );
}

// macros for shared values
#define xThreads 16
#define yThreads 32

[numthreads(xThreads,yThreads,2)]
void SpreadActivations(uint3 id : SV_DispatchThreadID)
{
  // get activation data from texture
  float2 pixel = ActivationTexture[id];
  const float actv = pixel.x;
  const float size = pixel.y;
  // if it's a pixel without activation or radius, we are done
  if (size < 1e-5 || actv < 0.001) { return; }

  // y-indexing seems to be flipped? if this is not done, image is wrong way round
  float y_corr = ScreenResolution.y - 1 - id.y;

  // write activation into output pixel
  SimulationRenderTexture[uint3(id.x, y_corr, id.z)] = float4(actv, actv, actv, 1);
  
  // sigma is diameter, size is radius
  const float sigma = size * 2.0;

  // after 3 deviations, tail is near unobservable, so spread up to 3 deviations
  const uint max_r = size * 4.0 * ScreenResolution.x; // 2 deviations for performance
  // to save sqrt for radius comparison save r^2
  const uint maxr2 = max_r * max_r;

  // iterate the entire area covered by the radius
  for (uint xOff=0; xOff < max_r; xOff++)
  {
    for (uint yOff=0; yOff < max_r; yOff++)
    {
      // don't overwrite centre
      if (xOff + yOff == 0)
        continue;
      
      // if we are past radius, move to next x-location, as we won't be inside the circle again if we increase the radius
      if ((yOff*yOff + xOff*xOff) >= maxr2)
        break;

      // calculate spread according to gaussian and scale
      float dist = sqrt( (float)(xOff*xOff) / (float)(ScreenResolution.x * ScreenResolution.x)
        + (float)(yOff*yOff) / (float)(ScreenResolution.y * ScreenResolution.y) );
      float4 spread = actv * Gaussian(dist, sigma) * float4(1, 1, 1, 1); //JR: removed scale (solved in Gaussian funciton)

      // spread the activation to pixels (since we only iterate one radius, we are writing to all 4 quadrants)
      SimulationRenderTexture[uint3(id.x + xOff, y_corr + yOff, id.z)] += spread; // Inlcudes midlines (x=0 or y =0)
      SimulationRenderTexture[uint3(id.x - xOff, y_corr + yOff, id.z)] += spread * (float)(xOff>0); // Don't override vert.  midline
      SimulationRenderTexture[uint3(id.x + xOff, y_corr - yOff, id.z)] += spread * (float)(yOff>0); // Don't override hor. midline
      SimulationRenderTexture[uint3(id.x - xOff, y_corr - yOff, id.z)] += spread * (float)(yOff>0) * (float)(xOff>0); // Don't override midlines
    }
  }
}


[numthreads(xThreads,yThreads,2)]
void ClearActivations(uint3 id : SV_DispatchThreadID)
{
  // reset the activation texture
  ActivationTexture[uint3(id.xy, id.z)] = float2(0,0);
  // reset render texture
  SimulationRenderTexture[uint3(id.xy, id.z)] = float4(0,0,0,1);
}

[numthreads(32,32,1)]
void DebugBuffer(uint3 id : SV_DispatchThreadID)
{
  // float2 pixel = PhospheneTexture[float3(id.xy, 0)];
  // const float actv = pixel.x;
  // const float size = pixel.y;
  // // if it's a pixel without activation or radius, we are done
  // debugBuffer[id.x + id.y * screenResolution.x] = float4(id.x, id.y, actv, size);

  float4 pixel = SimulationRenderTexture[id];
  debugBuffer[id.x + id.y * ScreenResolution.x] = pixel;
}